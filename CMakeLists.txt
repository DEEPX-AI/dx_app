cmake_minimum_required(VERSION 3.14)
project(dxrt DESCRIPTION "DEEPX Application Templates")
set(CMAKE_CXX_STANDARD_REQUIRED "ON")
set(CMAKE_CXX_STANDARD "17")
set(DXRT_RELEASE_DIR ${CMAKE_BINARY_DIR}/release)
set(CMAKE_INSTALL_PREFIX ${DXRT_RELEASE_DIR})
list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake) # using function & cfg cmake file 

include(dxrt.cfg)
include(dxrt.function)

add_compile_options(-W -Wall -pthread -fstrict-volatile-bitfields -fPIC)

if(ENABLE_DEBUG_INFO)
    add_compile_options(-g -rdynamic)
endif()

if(USE_OPENCV)
add_compile_definitions(USE_OPENCV=1)
endif()
if(USE_EASYLOG)
add_compile_definitions(USE_EASYLOG=1)
endif()

if(USE_ORT)
add_onnxruntime()
endif()

if(USE_OPENCV)
add_subdirectory(templates/classification)
add_subdirectory(templates/object_detection)

add_subdirectory(demos/object_detection)
add_subdirectory(demos/classification)
add_subdirectory(demos/pose_estimation)
add_subdirectory(demos/denoiser)
add_subdirectory(demos/object_det_and_seg)
add_subdirectory(demos/segmentation)
endif()

message(STATUS "Compiler : ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION} (${CMAKE_CXX_COMPILER})")
message(STATUS "Using compiler flags: ${CMAKE_CXX_FLAGS}")
message(STATUS "Using c++ standard required: ${CMAKE_CXX_STANDARD_REQUIRED}")
message(STATUS "Using c++ standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "Using static linker flags: ${CMAKE_STATIC_LINKER_FLAGS}")
message(STATUS "Using shared linker flags: ${CMAKE_SHARED_LINKER_FLAGS}")
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "CMAKE_C_COMPILER_ID: ${CMAKE_C_COMPILER_ID}")
message(STATUS "CMAKE_CXX_COMPILER_ID: ${CMAKE_CXX_COMPILER_ID}")
message(STATUS "CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")
message(STATUS "CMAKE_HOST_SYSTEM_PROCESSOR: ${CMAKE_HOST_SYSTEM_PROCESSOR}")
message(STATUS "CMAKE_TOOLCHAIN_FILE: ${CMAKE_TOOLCHAIN_FILE}")
message(STATUS "CMAKE_INSTALL_PREFIX: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "CMAKE_SOURCE_DIR: ${CMAKE_SOURCE_DIR}")
message(STATUS "CMAKE_CURRENT_SOURCE_DIR: ${CMAKE_CURRENT_SOURCE_DIR}")
message(STATUS "CMAKE_CURRENT_LIST_DIR: ${CMAKE_CURRENT_LIST_DIR}")
message(STATUS "CMAKE_CURRENT_BINARY_DIR: ${CMAKE_CURRENT_BINARY_DIR}")
message(STATUS "DXRT_DIR: ${DXRT_DIR}")