name: Merge Staging to Main
run-name: Merging staging of ${{ github.event.client_payload.repo_name }} to main (Triggered by ${{ github.event.client_payload.parent_sha }})

on:
  repository_dispatch:
    types:
      - merge-staging-to-main

permissions: write-all

jobs:
  merge-and-dispatch:
    runs-on:
      - self-hosted
      - sdk
    timeout-minutes: 10
    steps:
      - name: Clean Workspace
        run: |
          sudo rm -rf ${{ github.workspace }}
          mkdir -p ${{ github.workspace }}

      - name: Checkout Main Branch
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GC_DCI_TOKEN }}
          fetch-depth: 0

      - name: Fetch Staging Branch
        run: git fetch origin staging

      - name: Get Last Staging Commit Message
        id: get_staging_message
        run: |
          LAST_STAGING_COMMIT_MESSAGE=$(git log -1 --pretty=%B origin/staging)
          echo "LAST_STAGING_COMMIT_MESSAGE=$LAST_STAGING_COMMIT_MESSAGE" >> $GITHUB_ENV

      - name: Check Bump version output
        id: semver
        run: |
          echo "Parsing bump type from commit message..."
          echo "Commit Message: $LAST_STAGING_COMMIT_MESSAGE"
          bump_type=$(echo "$LAST_STAGING_COMMIT_MESSAGE" | grep -oP 'bump=\K[^+]+')
          echo "Parsed bump type: $bump_type"
          echo "bump=$bump_type" >> $GITHUB_OUTPUT
          echo "BUMP_TYPE=$bump_type" >> $GITHUB_ENV

      - name: Check Diff Between Main and Staging
        id: check_diff
        run: |
          if git diff --quiet main origin/staging; then
            echo "::notice::No differences between main and staging. Skipping merge."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "::notice::Differences found. Proceeding with merge."
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Merge Staging to Main (Squash)
        if: steps.check_diff.outputs.has_changes == 'true'
        run: |
          echo "Pulling latest changes from origin/main before merge..."
          git pull origin main # 최신 main 브랜치 상태를 가져옴

          echo "Attempting to squash merge origin/staging into main..."
          git merge --squash origin/staging

          echo "Deleting RELEASE_NOTES_WITH_JIRA_NUM.md if exists..."
          rm -f RELEASE_NOTES_WITH_JIRA_NUM.md

          echo "Checking if anything is staged..."
          if git diff --staged --quiet; then
            echo "::notice::No changes staged after squash merge. Skipping commit."
            exit 0
          fi

          bump_type="${{ env.BUMP_TYPE }}"
          tag_message=$(echo "${{ env.LAST_STAGING_COMMIT_MESSAGE }}" | cut -d'+' -f2)
          if [[ "$bump_type" != "none" ]]; then
            echo "::notice::Applying bump2version for $bump_type"
            pip install bump2version

            # bump2version 수행 & new_version 추출
            NEW_VERSION=$(bump2version "$bump_type" --no-commit --no-tag --list | grep new_version | cut -d= -f2 | tr -d ' ')
            echo "NEW_VERSION=$NEW_VERSION"
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
            git add .
            COMMIT_MESSAGE="v$NEW_VERSION"

            git tag -a "v$NEW_VERSION" -m "$tag_message"
            git push origin "v$NEW_VERSION"
          else
            echo "::notice::No version bump requested"
            COMMIT_MESSAGE="${{ env.LAST_STAGING_COMMIT_MESSAGE }}"

            OLD_VERSION=$(cat release.ver | tr -d ' \n')
            echo "OLD_VERSION=$OLD_VERSION"

            # 기존 태그 삭제 (local + remote)
            git tag -d "v$OLD_VERSION" || true
            git push origin :refs/tags/v$OLD_VERSION || true

            # 새 태그 재생성
            git tag -a "v$OLD_VERSION" -m "$tag_message"
            git push origin "v$OLD_VERSION"
          fi

          echo "::notice::Creating squash commit with message: $COMMIT_MESSAGE"
          git commit -m "$COMMIT_MESSAGE"
          git push origin main

      - name: Recreate Staging Branch from Main
        if: steps.check_diff.outputs.has_changes == 'true'
        run: |
          echo "Deleting remote origin/staging branch..."
          git push origin --delete staging || true

          echo "Checking out main branch and pulling latest..."
          git checkout main
          git pull origin main

          echo "Creating new staging branch from main..."
          git checkout -b staging

          echo "Pushing new staging branch to origin..."
          git push -u origin staging

      - name: Get New Main SHA
        id: get_sha
        run: echo "main_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Dispatch Update to Parent Repository
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GC_DCI_TOKEN }}
          repository: ${{ github.event.client_payload.parent_owner }}/${{ github.event.client_payload.parent_repo }}
          event-type: update-submodule-from-child
          client-payload: |
            {
              "submodule_name": "${{ github.event.client_payload.repo_name }}",
              "submodule_sha": "${{ steps.get_sha.outputs.main_sha }}",
              "submodule_ref": "main",
              "parent_ref": "${{ github.event.client_payload.parent_ref }}"
            }
